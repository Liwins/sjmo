package cn.riversky.gitbook.Structtype.flyweight;

/**
 * 享元模式
 *描述：享元模式通过共享技术实现相同或相似对象的重用，在逻辑上每一个出现的实体都有一个对象与之对应，然而在物理上它们却共享同一个享元对象
 *  这个对象可以出现在一个字符串的不同地方，相同的字符对象都指向同一个实例，在享元模式中，存储这些共享实例对象的地方称为享元池
 *  享元模式以共享的方式高效地支持大量细粒度对象的重用，享元对象能做到共享的关键是分了内部状态（不变的）和外部状态（变化的），通过
 *  区分内部状态和外部状态，就可以将具有相同内部状态的对象存储在享元池中，享元池中的对象是可以实现共享的，需要的时候就将对象从
 *  享元池中取出，实现对象的复用，通过向取出的对象注入不同的外部状态，就可以得到一系列相似的对象。
 *定义：
 * 享元模式：运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的
 * 多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此又称为轻量级模式，它是一种对象结构型模式。
 * 类型：单纯享元模式，复合享元模式。
 * 单纯享元模式：有点类似于缓存（可以与简单工厂相结合进行构建）
 * 复合享元模式：与组合模式进行组合，将享元抽象类->组合抽象类，享元共享对象分为，基本形（叶子）和组合型（节点）
 * @author riversky E-mail:riversky@126.com
 * @version 创建时间 ： 2018/1/5.
 */
public class Client {
    public static void main(String[] args) {
        String str1="abcd";
        String str2="abcd";
        String str3="ab"+"cd";
        String str4="ab";
        str4+="cd";
        System.out.println(str1==str2);
        System.out.println(str1==str3);
        System.out.println(str1==str4);
        str2+="e";
        System.out.println(str1==str2);
    }
}
