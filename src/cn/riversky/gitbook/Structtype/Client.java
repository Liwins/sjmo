package cn.riversky.gitbook.Structtype;

/**
 * 7个结构型模式
 * 适配器模式：不兼容结构的协调，分为类结构性模式和对象结构型模式（使用更普遍）
 *      将一个类的接口转换成用户希望的另一个接口，使得原本由于接口不兼容而不能在一起工作的哪些类可以一起工作
 * 桥接模式：处理多维度变化
 *      将抽象部分与实现部分分离，使它们可以独立变化。（逻辑部分用继承，另一维度用接口）
 * 组合模式：树形结构的处理
 *      将对象组合成树形结构以表示“部分-整体”的层次结构，它使得客户对单个对象和符合对象的使用具有一致性。
 * 装饰模式：扩展系统功能
 *      动态地给一个对象添加一些额外的职责，就扩展功能而言，它比生成子类的方式更为灵活。
 * 外观模式：对外功能提供统一接口
 *      子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使得这一子系统更加容易使用。
 * 享元模式：实现对象的复用,节省内存使用
 *      运用共享技术有效地支持大量细粒度的对象。
 * 代理模式：改变类方法
 *      为其他对象提供一个代理以控制对这个对象的访问。
 * @author riversky E-mail:riversky@126.com
 * @version 创建时间 ： 2018/1/4.
 */
public class Client {
}
