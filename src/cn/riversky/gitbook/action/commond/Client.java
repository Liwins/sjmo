package cn.riversky.gitbook.action.commond;

/**
 * 命令模式*****
 * 描述：命令模式可以将请求发送者和接受者完全解耦，发送者与接受者之间没有直接引用关系，发送请求的对象只需知道如何发送请求，
 * 而不必知道如何完成请求。
 * 定义：将一个请求封装为一个对象，从而让我们可用不同的请求对客户进行参数化；对请求进行排队或者记录请求日志，以及支持可撤销的操作
 * 核心：引入命令类，该类可以来降低发送者和接受者的耦合度，请求发送者只需要指定一个命令对象，再通过命令对象来调用请求接受者的处理方法
 * 本质：对请求进行封装，一个请求对应于一个命令，将发出命令的责任和执行命令的责任分隔开，每一个命令都是一个操作：请求的一方发出请求要求
 * 执行一个操作；接收的一方收到请求，并执行响应的操作，命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的
 * 接口，更不必知道请求如何被接收，操作是否被执行、何时被执行，以及是怎样被执行。
 * 关键：通过引入抽象命令类，请求发送者针对抽象命令类编程，只有实现了抽象命令的具体命令才与请求接收者相关联。在最简单的抽象命令类中只包含
 * 了一个抽象的execute方法，每个具体的命令类将一个Receiver类型的对象作为一个实例变量进行存储，从而具体指定一个请求的接收者，不同的具体命令类
 * 提供了execute()方法的不同实现，并调用不同的接受者的请求方法
 * 扩展：
 * 1普通的命令模式设计
 * 2命令队列（命令的批处理）
 * 3撤销操作（命令操作具有可逆性，比如加法与减法，乘法和除法）
 * 4请求日志（redis和mysql的备份机制）**
 * 5宏命令（组合模式和命令模式的结合使用）
 * @author riversky E-mail:riversky@126.com
 * @version 创建时间 ： 2018/1/6.
 */
public class Client {
    public static void main(String[] args) {

    }
}
