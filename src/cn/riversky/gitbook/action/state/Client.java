package cn.riversky.gitbook.action.state;

/**
 * 状态模式：
 * 状态模式用于解决系统中复杂的状态转换以及不同状态下行为的封装问题。当系统中某个对象存在多个状态，这些状态之间可以进行装欢，而且对象在
 * 不同状态下不相同时可以使用状态模式。状态模式将一个对象的状态从该对象中分离出来，封装到专门的状态类中，使得对象状态可以灵活变化，对于
 * 客户端而言，无需关心对象状态的转换以及对象所处的当前状态，无论对于何种状态的对象，客户端都可以一致处理。
 * 定义：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象，状态模式是一种对象行为型模式。
 * 核心：在状态模式中引入了抽象状态类和具体状态类，它们是状态模式的核心。在设计时，环境类Context与抽象状态类State之间存在单向关联关系
 * ，在Context中定义了一个State对象。在实际使用时，它们之间可能存在更为复杂的关系，State与Context之间可能也存在依赖或者关联关系
 * 理解：在状态模式使用过程中，一个对象的状态之间还可以进行相互转换，通常有两种实现状态转换的方式
 * 1统一由环境类来负责状态之间的转换，此时，环境类还充当了状态管理器角色，在环境类业务方法中通过对某些属性的判断实现状态转换，还可以
 * 提供一个专门的方法用于实现属性判断和状态转换
 * context类中
 * public void changeState(){
 *     if(value==0){
 *         this.setState(new ConcreteStatea());
 *     }else{
 *         ...
 *     }
 * }
 * 2由具体状态类来负责状态之间的转换，可以在具体状态类的业务方法中判断环境类的某些属性再根据情况为环境设置设置新的状态对象，实现状态转换
 * 。此时，状态类与环境类之间就存在依赖或者关联关系，因为状态类需要访问环境类中的属性
 * State类中
 * public void changeState(Context ctx){
 *     if(ctx.getValue==0){
 *         ctx.setState(new ConcreteStatea());
 *     }else{
 *         ...
 *     }
 * }
 * 注意一些其他的应用：共享状态的多环境对象共享统一状态（静态成员对象）
 * @author riversky E-mail:riversky@126.com
 * @version 创建时间 ： 2018/1/11.
 */
public class Client {
}
