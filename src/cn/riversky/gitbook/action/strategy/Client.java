package cn.riversky.gitbook.action.strategy;

/**
 * 策略模式
 * 在策略模式中，我们可以定义一些独立的类来封装不同的算法，每一个发呢规划组昂一种具体的算法，在这里，每一个封装算法的类我们都可以称之为
 * 一种策略，为了保证这些策略在使用时具有一致性，一般会提供一个抽象的策略类来做规则的定义，而这种算法则对应于一个具体策略类
 * 目的：将算法的定义与使用分开，也就是将算法的行为和环境分开，将算法那的定义专门放在策略类中，每一个策略类封装了一种实现算法，使
 * 用算法的环境类针对抽象策略类进行编程，符合依赖倒转原则，在出现新的算法是，只需要增加一个新的实现类（策略）即可，
 * 定义：一系列算法类，将每一个算法封装起来，并让他们可以相互替换，策略模式让算法独立于使用它们的客户而变化，也称为政策模式
 * @author riversky E-mail:riversky@126.com
 * @version 创建时间 ： 2018/1/11.
 */
public class Client {
    public static void main(String[] args) {

    }
}
