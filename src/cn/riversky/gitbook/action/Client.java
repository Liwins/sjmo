package cn.riversky.gitbook.action;

/**
 * 十一个行为型模式
 * 职责链模式：请求的链式处理
 *      为解除请求的发送者和接受者之间的解耦，而是用多个对象都有机会处理这个请求：将这些对象连成一条链，并沿着这条链传递该请求，知道有一个对象处理。
 * 命令模式：请求发送者与接收者解耦
 *      将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。
 * 解释器模式：自定义语言的实现
 *      定义语言的文法，并且建立一个解释器来解释该语言中的句子。
 * 迭代器模式：遍历聚合对象中的元素
 *      提供一种方法顺序访问一个聚合对象中的各个元素，而又不需暴漏该对象的内部表示。（Java已经给程序员实现）
 * 中介者模式：协调多个对象之间的交互
 *      用一个中介对象来封装一系列的对象交互；中接着使各对象不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。
 * 备忘录模式：撤销功能的实现
 *      在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可将该对象恢复到先前保存的状态
 * 观察者模式：对象间的联动
 *      定义对象间一对多的依赖关系，一遍当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。
 * 状态模式：处理对象的多种状态及其相互转化
 *      允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它所属的类。
 * 策略模式：算法的封装与切换
 *      定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换，策略模式使得算法的变化可独立于使用它的客户。
 * 模版方法模式
 *      定义一个操作中的短发的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
 * 访问者模式：操作复杂对象结构
 *      表示一个作用于某对象结构中的各元素的操作，可以在不改变各元素的类的前提下定义作用域这些元素的新操作。
 * @author riversky E-mail:riversky@126.com
 * @version 创建时间 ： 2018/1/6.
 */
public class Client {
    public static void main(String[] args) {

    }
}
